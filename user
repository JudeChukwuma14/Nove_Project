E-commerce API
Build a RESTful API for an e-commerce platform where users can browse products, add them to a cart, place orders, and manage their profiles. Sellers can also manage their products.
Features:

1. User Roles:
   - Admin: Can manage products, categories, and orders.
   - Customer: Can browse products, add to cart, and place orders.
   - Seller: Can add and manage their own products.

2. Product Management:
   - CRUD operations for products.
   - Each product should have:
     - Name
     - Description
     - Price
     - Category
     - Stock quantity
     - Image URL (optional)
   - Filter products by category, price range, or availability.

3. Category Management:
   - CRUD operations for product categories (e.g., "Electronics", "Clothing").

4. Shopping Cart:
   - Allow customers to add/remove products to/from their cart.
   - Calculate the total price of items in the cart.

5. Order Management:
   - Allow customers to place orders.
   - Store order details (e.g., products, total price, shipping address).
   - Allow customers to view their order history.

6. Authentication and Authorization:
   - User registration and login.
   - JWT-based authentication.
   - Role-based access control (e.g., only admins can delete products).

7. Search and Pagination:
   - Search for products by name or description.
   - Paginate product listings.

8. API Documentation:
   - Use Swagger or Postman to document your API endpoints.

---

 Tech Stack:
- Runtime: Node.js
- Framework: Express.js
- Database: MongoDB (with Mongoose) or any database of your choice.
- Authentication: JSON Web Tokens (JWT) with `jsonwebtoken`.
- Validation: Use `joi` or `express-validator` for request validation.
- Environment Variables: Use `dotenv` to manage environment variables.
- Logging: Use `morgan` or `winston` for logging requests.
- API Testing: Use `Postman` or `Jest` for testing your API.

---

#### API Endpoints:

1. Auth Routes:
   - `POST /api/auth/register` - Register a new user.
   - `POST /api/auth/login` - Log in and get a JWT token.
   - `GET /api/auth/me` - Get the logged-in user's profile (protected route).

2. Product Routes:
   - `GET /api/products` - Get all products (with filters and pagination).
   - `GET /api/products/:id` - Get a single product by ID.
   - `POST /api/products` - Create a new product (admin/seller only).
   - `PUT /api/products/:id` - Update a product (admin/seller only).
   - `DELETE /api/products/:id` - Delete a product (admin/seller only).

3. Category Routes:
   - `GET /api/categories` - Get all categories.
   - `POST /api/categories` - Create a new category (admin only).
   - `DELETE /api/categories/:id` - Delete a category (admin only).

4. Cart Routes (Protected by JWT):
   - `GET /api/cart` - Get the user's cart.
   - `POST /api/cart` - Add a product to the cart.
   - `DELETE /api/cart/:productId` - Remove a product from the cart.

5. Order Routes (Protected by JWT):
   - `POST /api/orders` - Place an order.
   - `GET /api/orders` - Get the user's order history.
   - `GET /api/orders/:id` - Get details of a specific order.


 Steps to Build:
1. Set up a Node.js project with `npm init`.
2. Install dependencies: `express`, `mongoose`, `jsonwebtoken`, `bcrypt`, `dotenv`, etc.
3. Create database models for `User`, `Product`, `Category`, `Cart`, and `Order`.
4. Implement user authentication (register, login, JWT).
5. Build CRUD endpoints for products, categories, carts, and orders.
6. Add middleware for authentication, authorization, and validation.
7. Test your API using Postman or automated tests with `Jest`.
8. Document your API using Swagger or Postman.
